#summary a GeoJSON based observations/data-centric minimal schema

see also [http://geojson.org/geojson-spec.html geojson]

see also [http://carocoops.org/obsjson/feeds/all/latest_hours_12 latest 12 hours from platforms as ObsJSON]

see also [http://code.google.com/p/xenia/source/browse/trunk/sqlite/json/xenia_sqlite_to_json.pl xenia to json perl script]

developed from earlier documentation regarding [http://nautilus.baruch.sc.edu/twiki_dmcc/bin/view/Main/ObsKML#Simple_schema_JSON_Alternate_1_O ObsJSON] and [http://nautilus.baruch.sc.edu/twiki_dmcc/bin/view/Main/ObsKML ObsKML]

<wiki:toc max_depth="6" />

= Simple schema = 

Below example is more flat/array oriented like netCDF,CSV and could support moving platforms(ships,gliders) as well as stationary ones.

  * elevRel is the 'relative elevation' in meters height(+) or depth(-) from the given GeoJSON z coordinate(s) with zero z coordinate corresponding to mean sea level(MSL).
  * The ordering of effected list arguments is in time increasing order(oldest first, latest last) allowing picking off the latest value be grabbing the last associated set of time/values off the list.
  * Stationary platforms would use GeoJSON 'Point' type and mobile platforms would use 'MultiPoint' type.  Multipoint coordinates are paired with listed time values.
  * (optional) Observation listing order is preferred to be from highest elevation/altitude to lowest elevation/depth.
  * (optional) Redundant sensors/observations would be listed in their order of importance (primary, secondary, etc) or depth(highest to lowest elevation).

{{{
{
    "type": "Feature",
    "geometry": {
        "type": "MultiPoint",
        "coordinates": [[-80.55,30.04,0],[-79.00,31.00,0],[-78.00,32.00,0]] 
    },
    "properties": {
        "schemaRef": "ioos blessed schema name reference",
        "dictionaryRef": "ioos blessed obstype uom dictionary reference",
        "dictionaryURL": "http://nautilus.baruch.sc.edu/obsjson/secoora_dictionary.json",
        "metadataURL": "a link to further operator/platform metadata as GeoJSON"
        "operatorName": "ndbc",
        "operatorURL": "http://www.ndbc.noaa.gov/",
        "platformName": "41012",
        "platformURL": "http://www.ndbc.noaa.gov/station_page.php?station=41012",
        "platformId": "urn:x-noaa:def:station:noaa.nws.ndbc::41012",
   
        "time": ["2009-03-31T10:50:00Z","2009-03-31T11:50:00Z","2009-03-31T12:50:00Z"],

        "obsList": [
            {
                "obsType": "air_temperature",
                "uomType": "celsius",
                "valueList": ["22.0","23.0","24.0"],
                "elevRel": "3" 
            },
            {
                "obsType": "water_temperature",
                "uomType": "celsius",
                "valueList": ["17.0","18.0","19.0"],
                "elevRel": "-1" 
            } 
        ] 
    } 
} 
}}}

= embedded in KML as atom:link =

Could also use the KML TimeSpan tag below as well (especially if only referencing TimeSpan files only)

{{{
<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://earth.google.com/kml/2.1">
<Document>
  <name>ObsJSON example</name>
  <open>1</open>
  <Placemark id="ndbc.41024.buoy">
    <name>ndbc.41024.buoy</name>
    <description>An html table derived from the ObsJSON would be displayed here</description>
    <Point>
      <coordinates>-77.0,32.0,0</coordinates>
    </Point>
    <TimeStamp><when>2009-03-14T16:00Z</when></TimeStamp>

    <ExtendedData>

   <!-- GeoJSON related link(latest obs) -->
   <atom:link type="application/json"
    href="http://myurl/feeds/ndbc/latest/ndbc.41024.buoy.json" />

   <!-- GeoJSON related link (latest obs - past 48 hours -->
   <atom:link type="application/json"
    href="http://myurl/feeds/ndbc/latest_hours_48/ndbc.41024.buoy.json" />

    </ExtendedData>

  </Placemark>
</Document>
</kml>
}}}

= embedded in Atom = 

A simple Atom example using just JSON links, in this scenario each entry could reference the available platforms from a given provider.

{{{
...
<entry>
   <id>latest/ndbc.41024.buoy.json</id>
   <title>ndbc.41024.buoy</title>
   <updated>2009-03-14T16:00:00Z</updated>
   <georss:where>
     <gml:Point><gml:pos>-77 32</gml:pos></gml:Point>
   </georss:where>

   <!-- GeoJSON related link -->
   <link type="application/json"
    href="http://myurl/feeds/ndbc/latest/ndbc.41024.buoy.json" />
</entry>

<entry>
   <id>latest_hours_48/ndbc.41024.buoy.json</id>
   <title>ndbc.41024.buoy</title>
   <updated>2009-03-14T16:00:00Z</updated>
   <georss:where>
     <gml:Point><gml:pos>-77 32</gml:pos></gml:Point>
   </georss:where>

   <!-- GeoJSON related link -->
   <link type="application/json"
    href="http://myurl/feeds/ndbc/latest_hours_48/ndbc.41024.buoy.json" />
</entry>
...
}}}

Used the following links for examples <br>
http://sgillies.net/blog/883/sensible-observation-services <br>
http://www.youtube.com/watch?v=T04fKsD56LU

----
= Simple schema version 2 =

Below is another revision to the initial ObsJSON schema, which treats each platform sensor as a feature with associated geometries,properties and utilizing list association between geometry/time/value per feature/sensor.

  * Geometry z coordinate is relative to mean sea level(MSL) with height(+) or depth(-) in meters.
  * The ordering of effected list arguments is in time increasing order(oldest first, latest last) allowing picking off the latest value be grabbing the last associated set of time/values off the list.
  * Stationary platforms would use GeoJSON 'Point' type and mobile platforms would use '!MultiPoint' type.  !MultiPoint coordinates are paired with listed time values.
  * (optional ?) All fields under 'FeatureCollection' are optional except platformId.  Think the other fields give some more self-contained minimal context,usage but all these could be linked in some way via the platformId reference.
  * (optional ?) sensorId is optional but would provide a means of association for related time-series or sensor metadata.
{{{
{
    "type": "FeatureCollection",
    "schemaRef": "ioos blessed schema name reference",
    "dictionaryRef": "ioos blessed obstype uom dictionary reference",
    "dictionaryURL": "http://nautilus.baruch.sc.edu/obsjson/secoora_dictionary.json",
    "platformId": "urn:x-noaa:def:station:noaa.nws.ndbc::41012",
    "metadataURL": "link to further operator/platform metadata/links as XML/JSON",
    "operatorName": "ndbc",
    "operatorURL": "http://www.ndbc.noaa.gov/",
    "platformName": "41012",
    "platformURL": "http://www.ndbc.noaa.gov/station_page.php?station=41012",
    "features": [
        {
            "type": "Feature",
            "geometry": {
                "type": "MultiPoint",
                "coordinates": [[-80.55,30.04,3],[-79.00,31.00,3],[-78.00,32.00,3]] 
            },
            "properties": {
                "sensorId": "link to further sensor metadata/links as XML/JSON",
                "obsType": "air_temperature",
                "uomType": "celsius",
                "time": ["2009-03-31T10:50:00Z","2009-03-31T11:50:00Z","2009-03-31T12:50:00Z"],
                "value": ["22.0","23.0","24.0"] 
            } 
        },
        {
            "type": "Feature",
            "geometry": {
                "type": "MultiPoint",
                "coordinates": [[-80.55,30.04,-1],[-79.00,31.00,-1],[-78.00,32.00,-1]] 
            },
            "properties": {
                "sensorId": "link to further sensor metadata/links as XML/JSON",
                "obsType": "water_temperature",
                "uomType": "celsius",
                "time": ["2009-03-31T10:50:00Z","2009-03-31T11:50:00Z","2009-03-31T12:50:00Z"],
                "value": ["17.0","18.0","19.0"] 
            } 
        } 
    ] 
}
}}}

== Potential issues ==

  * Traditional request/response approaches are single-obs centric(give me just water_temperature for platform/area) rather than platform/sensor-centric(give me everything for a given platform)
  * How good/complete are request/response from SOS,ERDDAP,etc for 'all' recent platform data?

= Simple schema version 3 =

The below schema is flattened as much as possible, dropping the GeoJSON nesting/list and time/value list.  Would be very similar schema-wise to [http://www.ogcnetwork.net/node/189 WFS Simple GetFeature] (thanks Raj Singh for the reminder/link regarding WFS Simple) or the earlier example ERDDAP GeoJSON response(thanks Roy Mendelssohn) below.

{{{
{
    "type": "FeatureCollection",
    "schemaRef": "ioos blessed schema name reference",
    "dictionaryRef": "ioos blessed obstype uom dictionary reference",
    "dictionaryURL": "http://nautilus.baruch.sc.edu/obsjson/secoora_dictionary.json",
    "platformId": "urn:x-noaa:def:station:noaa.nws.ndbc::41012",
    "metadataURL": "link to further operator/platform metadata/links as XML/JSON",
    "operatorName": "ndbc",
    "operatorURL": "http://www.ndbc.noaa.gov/",
    "platformName": "41012",
    "platformURL": "http://www.ndbc.noaa.gov/station_page.php?station=41012",
    "features": [
        {
            "type": "Feature",
            "properties": {
                "latitude": "-80.55",
                "longitude": "30.04",
                "elevation": "3",
                "sensorId": "link to further sensor metadata/links as XML/JSON",
                "obsType": "air_temperature",
                "uomType": "celsius",
                "time": "2009-03-31T10:50:00Z",
                "value": "22.0" 
            } 
        },
       {
            "type": "Feature",
            "properties": {
                "latitude": "-80.55",
                "longitude": "30.04",
                "elevation": "3",
                "sensorId": "link to further sensor metadata/links as XML/JSON",
                "obsType": "air_temperature",
                "uomType": "celsius",
                "time": "2009-03-31T11:50:00Z",
                "value": "23.0" 
            } 
        },        
       {
            "type": "Feature",
            "properties": {
                "latitude": "-80.55",
                "longitude": "30.04",
                "elevation": "-1",
                "sensorId": "link to further sensor metadata/links as XML/JSON",
                "obsType": "water_temperature",
                "uomType": "celsius",
                "time": "2009-03-31T10:50:00Z",
                "value": "17.0" 
            } 
        }, 
       {
            "type": "Feature",
            "properties": {
                "latitude": "-80.55",
                "longitude": "30.04",
                "elevation": "-1",
                "sensorId": "link to further sensor metadata/links as XML/JSON",
                "obsType": "water_temperature",
                "uomType": "celsius",
                "time": "2009-03-31T11:50:00Z",
                "value": "18.0" 
            } 
        }              
    ] 
}
}}}

= example ERDDAP GeoJSON response = 

response below to request

http://coastwatch.pfeg.noaa.gov/erddap/tabledap/ndbcSosWTemp.geoJson?longitude,latitude,station_id,altitude,time,WaterTemperature&longitude%3E=-130&longitude%3C=-110&latitude%3E=30&latitude%3C=39&time%3E=2009-04-03T00:00:00Z

{{{
{
  "type": "FeatureCollection",
  "propertyNames": ["station_id", "altitude", "time", "WaterTemperature"],
  "propertyUnits": [null, "m", "UTC", "degrees_C"],
  "bbox": [-130.0, 33.74, -119.06, 38.23],
  "features": [

{"type": "Feature",
  "geometry": {
    "type": "Point",
    "coordinates": [-123.32, 38.23] },
  "properties": {
    "station_id": "urn:x-noaa:def:station:noaa.nws.ndbc::46013",
    "altitude": null,
    "time": "2009-04-03T10:50:00Z",
    "WaterTemperature": 10.6 }
},
{"type": "Feature",
  "geometry": {
    "type": "Point",
    "coordinates": [-123.32, 38.23] },
  "properties": {
    "station_id": "urn:x-noaa:def:station:noaa.nws.ndbc::46013",
    "altitude": null,
    "time": "2009-04-03T14:50:00Z",
    "WaterTemperature": 9.9 }
}
]
}
}}}
