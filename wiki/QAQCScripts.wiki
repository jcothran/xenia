#summary Details on the QAQC processing scripts.

<wiki:toc max_depth="6" />

= Introduction =

The QAQC processing is based around the QAQC documentation that came out of QARTOD meetings and distilled into a [http://trac.secoora.org/datamgmt/browser/docs/whitepapers/trunk/SEACOOS%20QA-QC%20Standards%20and%20Procedures%20Whitepaper.doc paper] by Sara Haines.
I've implemented the algorithms in a set of python scripts.

== Files ==
  === qaqcChecks.py ===
  This file is a wrapper script that has various command line parameters that control how/what QAQC is processed.
  ==== Command Line Parameters ====
  {{{
  -c, --XMLConfigFile The xml file containing the configuration information.
  -n, --LastNHours The Last N Hours to query data for.
  -b, --BeginDateTime The date to begin the data query for.
  -e, --EndDateTime The date to end the data query for.
  -s, --SQLOutputFileName Overrides the sql output file provided in the config file. This is the file the QAQC SQL UPDATE statements are saved.
  -q, --IgnoreQAQCFlags Flag allows us to restamp records that have already been quality controlled.
  -t, --TestRun   Flag allows us to run the QAQC with no committing into the database.
  }}}
  === Config Files ===
  ==== XMLConfigFile ====
  This is the configuration file used for the --XMLConfigFile parameter in the qaqcChecks.py script.
 {{{
<environment>
  <database> 
    <db>
      <type></type> 
      <name></name> 
      <user></user> 
      <pwd></pwd> 
      <host></host> 
    </db>
    <sqlAlchemyLog>0</sqlAlchemyLog>
  </database>
  <emailSettings> 
    <server></server>
    <from></from>
    <pwd></pwd>
    <emailList>
      <email></email>
    </emailList>
  </emailSettings>
  
  <qcLimits>
    <fileType>test_profiles</fileType>
    <file>test_profiles.xml</file>
  </qcLimits>
  <unitsCoversion>
    <file>UnitsConversionPython.xml</file>
  </unitsCoversion>
  <logging>    
    <configFile>qaqcLog.conf</configFile>  
  </logging>  
</environment>
 }}}
  * `<database>`
  Details the xml tags dealing with the database connection.
    * `<type>` - Type of the database: postgres is the default and currently only one supported.
    * `<name>` - The name of the database to connect to.
    * `<user>` - The user name to connect to the database with.
    * `<pwd>` - Password for the database connection.
    * `<host>` - IP address of the database host.
  * `<emailSettings>`
  Details the xml tags dealing with the email settings. Emails are sent out whenever we have a QAQC failure.
    * `<server>` - The SMTP server that is to be used to send the emails.
    * `<from>` - The user on the SMTP server that the email is from.
    * `<pwd>` - The user password to connect to the SMTP server.
    * `<emailList>` - A list of `<email>` entries that contain the email addresses of who we want to send the email to.
  * `<qcLimits>`
  qcLimits defines the section where the information about where/how the qc limits are stored. Currently we only use a test_profiles xml file.
    * `<fileType>` - Specifies the type of file the limits are stored in. Currently only test_profiles is used.
    * `<file>` The fully qualified path to the xml file to use. 