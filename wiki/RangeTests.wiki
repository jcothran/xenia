      #Range Tests

= Overview = 
This wiki will discuss running data validation against data stored in a Xenia schema database.

== Sensor Data QC ==

  === Input ===
   The following is an example of a simple test_profiles.xml file which contains only one platform with one sensor for QC validation:
 {{{
 <xml>
  <testProfileList>
   <testProfile>
    <id>CaroCoopsBuoys</id>
    <platformList>
     <platform>carocoops.CAP3.buoy</platform>
    </platformList>
    <obsList>
     <obs>
      <obsHandle>wind_speed.m_s-1</obsHandle>
      <UpdateInterval>24</UpdateInterval>
      <rangeHigh>32</rangeHigh>
      <rangeLow>0</rangeLow>
      <grossRangeHigh></grossRangeHigh>
      <grossRangeLo></grossRangeLo>
      <climatologicalRangeList> 
        <climateRange>
          <startMonth></startMonth>
          <endMonth></endMonth>
          <rangeLow></rangeLow>
          <rangeHigh></rangeHigh>
        </climateRange>  
      </climatologicalRangeList>
     </obs>
    </obsList>
    <notify>
     <timeLagLimit>14400</timeLagLimit>
     <wait>10</wait>
     <emailGroup>1</emailGroup>
     <emailMessage>5</emailMessage>
    </notify>
   </testProfile>
  </testProfileList>
 </xml>
 }}}


  A file may contain multiple test profiles, each of which can be used to group like platforms together. Like platforms would be platforms that have
  the same sensor array on board. 
  * `<testProfileList>`
  This tag denotes the start of a list of one or more `<testProfile>` entries.
  * `<testProfile>`
    * `<id>` 
    Names the test profile grouping that follows.
    * `<platformList>`
    The `<platformList>` can contain one or more `<platform>` child tags which provide the name of the platform to be tested in the `<testProfile>`. 
    * `<obsList>`
    Begins the list of each observation type the `<testProfile>` will run data range checks on.
      * `<obs>` is the starting tag for an individual observation type definition. 
        * `<obsHandle>` defines the observation type. The format for an `<obsHandle>` entry is "sensor name.unit of measurement", for example: "air_temperature.farenheit".   The sensor name must be defined in the databases sensor table. The unit of measurement must be defined in the uom_type table. 
        * `<UpdateInterval>` defines how many times a day a sensor transmits its data from the platform to the outside world. The sample above shows an interval 
  of 24, which would be every hour. This could be considered more of a platform configuration.
        * `<rangeHigh>` tag defines the upper acceptable range of a measurement. This is given as a floating point number.
        * `<rangeLow>` tag defines the lower acceptable range of a measurement. This is given as a floating point number.
        * `<timeLagLimit>` tag sets the number of seconds deviation allowed from the current time of the system compared to the measurement time in the database before the data is flagged as lagging.

  === Output ===
  The output of this processing is a csv file: [http://carocoops.org/~dramage_prod/seacoos/test_results.csv test_results.csv]. The file is written 
  into the provider specific directory. The contents of the csv are variable depending on how many test profiles are present as well as the sensors 
  present in the obsList for each test profile. The basic columns for each test profile will be: 
  _Test_Profile_ProfileName,platform_url,time,..._
  After the time entry, there can be multiple observation columns in the format of: 
  _!SensorName.!UnitOfMeasurement,range !RangeHighValue < x <!RangeLowValue_. For each test profile there will be a new header line created in the
  csv file.
  This file is then used to create an HTML status page, described in section 2.
 == Status Page Script ==
 Once the test_results.csv file is generated, we then run the [http://trac.secoora.org/datamgmt/browser/obskml/trunk/QAQC/gen_webpage.pl gen_webpage.pl] script against it.
 There is one required command line option for this script, --!WorkingDir. This script generates a simple set of HTML tables, one per test profile. A
 sample can be seen [http://carocoops.org/~dramage_prod/seacoos/test_results.html here].