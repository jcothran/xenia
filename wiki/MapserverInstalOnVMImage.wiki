#Notes on mapserver setup


=Packages=
I grabbed all the packages from the source, not through the Debian package manager. I ran into problem after problem grabbing source packages through Debian.

*Recent Changes*
Recently I have been attempting to get [http://tilecache.org/ TileCache] up and running. TileCache relies on the python mapscript from mapserver to work. I have been running into issues of undefined symbols with mapscript ranging from FT_New_Face to libiconv_open not being found. I think I have traced the issue to the fact I build all the mapserver pieces with --disable-shared. I have gone back and made most of them without that switch and seem to be getting closer. Basically this means instead of the libraries being linked into the exectuable, mapserver will now be using the components as *.so or shared objects.



==LIBPNG==

{{{
./configure 
make
make install
}}}

==FREETYPE==

{{{
setenv GNUMAKE gmake
./configure 
make
make install
}}}
==LIBJPEG==

{{{
./configure 
make
make install
make install-lib
}}}
==Tiff==

{{{
./configure 
make
make install
}}}
==LIBGeoTiff==

{{{
./configure --with-libtiff=/usr/local
make 
make install
}}}
UPDATE: Doing another round of builds, I was getting an error:
{{{
"Nonrepresentable section on output"
}}}
doing some internet searching turned up [http://mateusz.loskot.net/2008/07/31/libgeotiff-lesson-for-today/ this] need for this configure option:
{{{
./configure --with-ld-shared="gcc -shared"
or for UBUNTU
export CFLAGS=-fno-stack-protector
export CPPFLAGS=-fno-stack-protector
}}}

==LIBICONV==

{{{
./configure  
make
make install
}}}
==GD 2==

{{{
./configure --with-libiconv-prefix=/usr/local --with-png=/usr/local --with-freetype=/usr/local --with-jpeg=/usr/local
make
make install
}}}
==PROJ.4==

{{{
./configure 
make
make install
}}}
==SQLite==

{{{
./configure 
make
make install
}}}

==GDAL==
NOTE: Swig must be installed to use the python bindings.
{{{
./configure --prefix=/usr/local --with-static-proj4=/usr/local --with-png=/usr/local --with-jpeg=/usr/local --with-sqlite3=/usr/local --with-geotiff=/usr/local --with-python --with-pymoddir=/usr/local/lib/python2.5/site-packages
--with-tif=/usr/local --without-odbcmake
make install
}}}
==GEOS==
Needed to use sudo to do the make.
{{{
./configure 
sudo make
sudo make install
}}}
==AGG==

{{{
make
}}}
==PostGIS==
{{{
./configure 
}}}
Installed the postgresql-server-dev-8.3 package:
{{{
sudo apt-get postgresql-server-dev-8.3
}}}
To run the 'make check', need to be the postgres user: 
{{{
sudo su postgres
make check
}}}
If not, you get an error message of: "psql: FATAL:  permission denied to set parameter "lc_messages""
==MAPSERVER==
Added following packges:
{{{
sudo apt-get install libxslt1-dev
sudo apt-get install libpam0g-dev
}}}
{{{
./configure --enable-runpath --with-gdal=/usr/local/bin/gdal-config --with-ogr=/usr/local/bin/gdal-config --with-proj=/usr/local --with-php=/usr/include/php5 --with-gd=/usr/local --with-freetype=/usr/local --with-png=/usr/local --with-jpeg=/usr/local --with-libiconv=/usr/local --with-wmsclient --with-postgis=/usr/lib/postgresql/8.3/bin/pg_config
make
}}}
After making mapserver, you'll need to put the executable in a cgi-bin so apache or whatever webserver you are using will be able to access it.

=Various Notes=
One issue I was having was some of the gdal utilities not being able to find a shared object that I had built. A useful tool to track down where/what shared libraries an executable is using is "ldd". If I do "ldd mapserver" my output is:
{{{
libjpeg.so.62 => /home/dramage/local/lib/libjpeg.so.62 (0x40018000)
libz.so.1 => /usr/lib/libz.so.1 (0x40046000)
libxerces-c.so.28 => /usr/local/lib/libxerces-c.so.28 (0x40058000)
libpthread.so.0 => /lib/libpthread.so.0 (0x4043e000)
libgeotiff.so => /home/dramage/local/lib/libgeotiff.so (0x4048f000)
libnetcdf.so.3 => /usr/lib/libnetcdf.so.3 (0x404f7000)
libpq.so.5 => /usr/local/pgsql/lib/libpq.so.5 (0x4051a000)
librt.so.1 => /lib/librt.so.1 (0x40533000)
libdl.so.2 => /lib/libdl.so.2 (0x40546000)
libcurl.so.4 => /usr/local/lib/libcurl.so.4 (0x4054a000)
libm.so.6 => /lib/libm.so.6 (0x4057d000)
libstdc++.so.5 => /usr/lib/libstdc++.so.5 (0x4059f000)
libgcc_s.so.1 => /lib/libgcc_s.so.1 (0x40659000)
libc.so.6 => /lib/libc.so.6 (0x40662000)
/lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
libcrypt.so.1 => /lib/libcrypt.so.1 (0x40796000)
}}}
This is where the LD_LIBRARY_FLAGS really comes into play. If there is an existing build of any of the needed shared libraries and I did not have your environment setup to point to the builds I made, the executable would search the default path and use what it found, if it found anything. This could be problematic if the library was not built with whatever features I needed.