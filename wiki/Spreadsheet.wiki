#summary discussion about Google spreadsheets as templates for simple,common metadata application, infrastructure and sharing via data API

<wiki:toc max_depth="6" />

= Intro =

I've been experimenting some with Google spreadsheets lately and I did not realize that it includes a back-end data API for gathering/updating spreadsheet data.

A common issue from an IT perspective is that we are constantly trying to move and reformat Excel spreadsheet data (both data and metadata) from research projects/instrumentation logs into relational databases or other formats that are easier to work with and manage.

Turns out that google spreadsheets could be shared among a list of collaborators with a Google account(which can be aliased against an existing non-gmail email address). Spreadsheet info could be published for public viewing/access or kept private to the group of document collaborators.

Spreadsheets include a revision history so that if someone accidentally messed up the wrong sheet/tow/cell, we could correct using the earlier revision.  The revision capacity could also be used for provenance, time comparison purposes.

Best of all spreadsheets include an easy to use developer data API(supporting a variety of languages) that includes 'RESTful' data access/edit and some visualization capabilities via community-contributed 'gadgets'.

http://code.google.com/apis/spreadsheets/overview.html

http://code.google.com/apis/spreadsheets/docs/2.0/reference.html

http://code.google.com/apis/spreadsheets/spreadsheet_gadgets.html

I really like this approach as I think it would allow people to contribute easily on the front-end using a familiar approach (spreadsheets) while also allowing us automated access and display/report capabilities on the back-end. Might also allow us to bypass relational databases/sqlite altogether in regards to diverse but relatively low-volume metadata with the focus being on finding spreadsheet content layouts and visualizations/reports that are commonly useful.

= Potential spreadsheets = 

  * service,format,application registries
  * observing capacity resource inventory/mapping
  * cruise, point-of-opportunity shared resource scheduling
  * instrumentation maintenance/tracking, reports
  * qc,monitoring reports

= Links =

Spreadsheet importing
http://googlesystem.blogspot.com/2007/09/google-spreadsheets-lets-you-import.html

Spreadsheet mapper - create kml displays via spreadsheet template
http://earth.google.com/outreach/tutorial_mapper.html

Simple example of retrieving JSON feeds from Spreadsheets Data API
http://code.google.com/apis/gdata/samples/spreadsheet_sample.html

Change contents of a cell
http://code.google.com/apis/spreadsheets/docs/2.0/developers_guide_protocol.html#UpdatingCells



= examples = 

== spreadsheet design ==

see 
  * location [http://en.wikipedia.org/wiki/Well-known_text Well-Known Text(WKT)]
  * time [http://en.wikipedia.org/wiki/ISO_8601 ISO8601]

conventions
  * column header names use no whitespace, camelCase convention
  * fields are strings or numbers unless field name suffixed by
    * Type - indicates a Type lookup value which should be one of the associated row values on the 'type' sheet
    * Id - indicates a row Id lookup value which should be on the associated Id sheet list
    * stated another way, a 'Type' has a single possible value lookup while an 'Id' might have several row associated values
  * if 'Date' is used as a fieldname suffix, it implies a YYYY-MM-DD formatted day
  * if 'Time' is used as a fieldname suffix, it implies an ISO8601 formatted datetime

  * common sheet fields
    * id - unique id, may be autonumbered or string
    * URL - URL link to further webpage info/links
    * description - free-form verbiage description
    * location - Well-Known Text(WKT) representation of points and/or lines and/or polygons using decimal degrees and meters height(+)/depth(-) to mean sea level(MSL)
    * locationDescription - free-form verbiage describing location
    * timeSpanList - list of ISO8601 ranges like '2009-02-01T14:00:00Z/2009-02-02T14:00:00Z,2009-03-01T14:00:00Z/2009-03-02T14:00:00Z'
      * if seasonally repeating will accept 'XXXX' for the year like 'XXXX-02-01T14:00:00Z/XXXX-03-01T14:00:00Z' denoting a repeat span every February
    * timeStart - ISO8601 formatted time, like '2009-02-01T14:00:00Z'
    * timeEnd - ISO8601 formatted time, like '2009-02-01T14:00:00Z'


== !SensorInventory_v1.0 ==

Captures basic metadata regarding organization, platformList, sensorList, sensorTypes with linkages to further custom spreadsheets via MetadataId field

http://spreadsheets.google.com/pub?key=ryTSVxKd0ZEz2UbsmFiYZLA

----
= google maps, javascript = 

== !TimeMap ==
!TimeMap includes a scrollable timeslider element to google maps that changes the placemarks according to the time window.

http://googlegeodevelopers.blogspot.com/2009/01/timemap-helping-you-add-4th-dimension.html

== !MarkerCluster ==
!MarkerCluster pools a large number(hundreds) of placemarks into single cluster which can be expanded to improve map performance.

http://googlegeodevelopers.blogspot.com/2009/04/markerclusterer-solution-to-too-many.html

== Jquery ==
Jquery is an open javascript library which simplifies javascript development including cross-browser compatibility

http://googlegeodevelopers.blogspot.com/2009/04/new-articles-jquery-heat-maps-multi.html

== real-time boat tracking ==

Sharing the following *experimental* technical browser/javascript/JSON based application link from Paul Reuter working with SCCOOS.

It shows live boat tracking via an AIS message stream(click the 'start streaming' button below the map).

http://cordc.ucsd.edu/projects/ais/

Jeremy

From Paul's email:

One more really nice thing about JSON is it's intrinsic web-based push capability.  Seen here, http://app.lightstreamer.com/GridDemo/ is an example of using an embedded iframe and inline scripting to execute a function upon receiving real-time data.  Their API is a bit more complex, but the results are a scalable, high-volume, high-connectivity application with bandwidth throttling and real-time push/pull capability.  From the Web Developer Toolbar -> View Javascript.

I personally use an iframe+inline scripting for updating real-time AIS tracks on Google Maps.  If I had parsed my data on the server, I would create JSON objects, rather than provide the raw data as a means of reducing the client-side load.  See: http://cordc.ucsd.edu/projects/ais/  (click the start streaming button).  The AIS feed is about 15 messages per second, and incurs a fair amount of client-side scripting - be forewarned.

Just throwing that out there, in case anyone hasn't seen a real-time web app yet.

Paul

== HF radar ==

National coastal HF(high-frequency) radar displayed via google maps, javascript

http://hfradar.ndbc.noaa.gov