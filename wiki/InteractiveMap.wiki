#summary Technical Details of the Interactive Map

<wiki:toc max_depth="4" />

= Introduction =

The Secoora Interactive map is a !JavaScript driven mapping engine using [http://www.openlayers.org OpenLayers], [http://www.geoext.org GeoEXT], and [http://www.extjs.com ExtJS] !JavaScript libraries.


== Setup ==
The files and directory are structured as follows:
{{{
interactive_map.html
-lib
 |-ExtJS-3.3.0
 |-GeoExt-1.0
 |-OpenLayers-2.10
 |-Highcharts
 |-secoora_interactive.js
 |-olMap1.0.js
 |-ComparisonFilterEx.js
 |-adapter-extjs.js
 |-Ext.ux.HighChart.js
 |-units_conversion.js
-resources
 |-css
  |-ext-all-3-3-0.css
  |-popup.css
  |-mappanel.css
  |-style.css
  |-layout_objects.css
 |-images
   |-data_age
   |-default
   |-help
   |-legend
   |-openlayers
}}}

== File descriptions ==

  * interactive_map.html 
  This is the html file that kicks off the creation of the map.

  * secoora_interactive.js
  This is the JavaScript file that creates and manages the map.
  It extends the olMap class found in olMap1.0.js.

  * olMap1.0.js
  Contains the base class olMap. This class contains basic mapping setup.

  * adapter-extjs.js
  The adapter code needed to get the Highcharts graphing library to work with the ExtJS framework. The adapter is provided [http://www.sencha.com/forum/showthread.php?93669-Highcharts-adapter-and-plugin-for-ExtJS&highlight=highchartpaneljson
 here].
  * Ext.ux.HighChart.js
  The Highchart graphing class wrapper. The wrapper class is provided [http://www.sencha.com/forum/showthread.php?93669-Highcharts-adapter-and-plugin-for-ExtJS&highlight=highchartpaneljson here]. 

  * ComparisonFilterEx.js
  Class ComparisonEx overrides OpenLayers.Filter.Comparison to create the filters used on the map that allow filtering by observations and/or organization. Our platform data comes from a json file, and alot of the attributes are in a hierarchical structure. To filter on some of the properties, such as observation, a function was needed to traverse down to the particular property. The base implementation of Openlayers did not provide this. The function of interest is the recursive function: getAttribute.

  * units_conversion.js
  Natively the observation data is in metric. The unitConverter class allows the on the fly conversion from metric to Impertial. The initial implementation is found on [http://stackoverflow.com/questions/865590/javascript-unit-of-measure-conversion-library Stack Overflow]. Modifications were made to hand Celsius to Fahrenheit conversions.