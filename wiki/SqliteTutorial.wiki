#summary beginners perspective on using sqlite

Don't know if the below file based database will be useful or not, thanks for taking a look and letting me know if you've got an existing method/tool similar or if it seems too complex or involved for the task at hand.

Took the zipped csv files , reformatted slightly and moved them into a same structured sqlite database single table(table structure/columns shown at bottom of this message) which you can download(small file around 1 MB) at http://carocoops.org/resources/dhec.db

What you'll need to query the database on a windows platform (that's my assumption of what your working environment is - let me know if not, I query it on a linux server using a linux executable file) is the following download at http://www.sqlite.org/sqlite-3_6_7.zip

Create a folder, say for example 'c:\dhec' and place the unzipped sqlite executable 'sqlite3.exe' in there and also the dhec.db file.

Now from a windows command line window (start->run->enter 'cmd') you should be able to navigate to the c:\dhec folder and run the following command to start an interactive sqlite session

{{{
sqlite3.exe dhec.db
}}}

The screen should give you a sqlite prompt and you can try the following SQL command for example:
{{{
select * from dhec_beach where etcoc > 20 order by insp_date desc limit 30;
}}}
Which means select all columns from the dhec_beach table where the etcoc value is greater than 20 ordering the results by insp_date descending limiting the resultset to the initial top 30 results.

To show just say the columns station,insp_date,etcoc for the above query
{{{
select station,insp_date,etcoc from dhec_beach where etcoc > 20 order by insp_date desc limit 30;
}}}
To limit the results to just station 'WAC-015' add the following condition to the where clause
{{{
select station,insp_date,etcoc from dhec_beach where etcoc > 20 and station = 'WAC-015' order by insp_date desc limit 30;
}}}
To limit the result to just the year 2006 add the following condition to the where clause

select station,insp_date,etcoc from dhec_beach where etcoc > 20 and station = 'WAC-015' and insp_date >= '2006-01-01' and insp_date < '2007-01-01' order by insp_date desc limit 30;

type '.exit' and return to get back to the command line.

One of the nice features is that we can create a command/query file and tell sqlite to run that so that if there's some small condition or value that needs to be adjusted we can change the file and rerun the command/query file against the database.

Create the following sample_query.txt file with the following commands

{{{
.mode csv

.output query1.txt
select * from dhec_beach where etcoc > 20 order by insp_date desc limit 30;

.output query2.txt
select station,insp_date,etcoc from dhec_beach where etcoc > 20 order by insp_date desc limit 30;
}}}

This file contains just the same two initial queries mentioned earlier but sent to their own output files.

To run this file against the database enter the following at the command line
{{{
sqlite3.exe dhec.db < sample_query.txt
}}}
And it will produce the output files query1.txt and query2.txt

That should be enough to give you an idea of what's possible - if you're interested can explain answer further questions about sqlite commands or sql queries.

There's additional information at http://www.sqlite.org/sqlite.html 

#table structure
{{{
create table dhec_beach (
lims_number text,
station text,
insp_date text,
insp_time text,
lab_number text,
insp_type text,
e_sign text,
etcoc int,
salinity int,
rainfall real,
tide text,
wind_curr int,
weather int
);
}}}