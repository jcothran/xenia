#summary Design and comparison issues related to the Xenia schema

= [XeniaHome#Xenia_Design Xenia Design] =

This is an earlier documentation [http://nautilus.baruch.sc.edu/twiki_dmcc/bin/view/Main/XeniaDesign webpage] to list some Xenia design considerations, benchmarks, and tips as related to the relational database schema.

== Similar observation schemas ==

[ftp://ftp.research.microsoft.com/pub/tr/TR-2008-92.pdf A Data Model for Environmental Observations] [http://www.carocoops.org/documents/ODM_data_model.pdf pdf]

----

= Brief Xenia/ODM schema comparison =

Reviewed the links and schema and here's some initial comparison and feedback between the ODM and Xenia schemas.

As a general summary I would say the schemas are very similar with both schemas revolving around a central observations table (in ODM, the 'observations values' block - in Xenia, the 'multi_obs' table) with the ODM schema supplying a greater level of attribute detail on its support tables.

Here's a mapping between the ODM block sections in Figure 2 at http://water.usu.edu/cuahsi/odm/files/ODM1.pdf

and the Xenia schema shown at http://code.google.com/p/xenia/wiki/XeniaPackageV2#Xenia_Table_Schema_Diagram

ODM -> Xenia:

observation values -> multi_obs

monitoring site locations -> platform

data sources -> organization

variables -> 'data dictionary' block

data qualifiers -> quality control

data collection methods -> none, maybe qc url, links

----

no mapping:

value grouping

categorical data

series catalog

----

For Xenia I'm taking a less detailed approach with reference to geospatial and time datums. Spatial references are WGS84 and elevation is reference to MSL(Mean Sea Level) with positive indicating meters height above the surface and negative indicating meters depth below the surface.


Things which are in Xenia but not similarly in ODM are as follows:

1)To support vector representations like wind, currents, etc I added a scalar to vector type mapping in my data dictionary. So every observation type is by default a vector of at least one scalar component.

2)Also added a generic 'collection' table which serves to provide a grouping type functionality and metadata to a set of observations, platforms or sensors.

3)The '_attr' tables can also function in a similar generic user defined manner, although I haven't really utilized them.

4)There is a specific articulation for Xenia of organizations->platforms->sensors->observations. There isn't a 'sensor' specific table that I see in ODM. Xenia uses the concept of sensors which are associated with a specific observation type (m_type_id) and s_order (1,2,3,...) to differentiate between redundant sensors or profiling sensors of the same observation type.

The separate articulation of the sensor table also serves summary observation type discovery purposes similar to the ODM observation lookup tables.

----

Also found the following quote parallels my caveat at http://code.google.com/p/xenia/wiki/XeniaHome#Description in regards to the use cases for this type relational database.

----

From the pdf p.2

This approach carries the burden of record level metadata, so it is not appropriate for all variables that might be observed. For example, individual pixel values in large remotely sensed images or grids are inappropriate for this model.

----

I would add that I am also looking towards performance enhancing query responses on Xenia databases by having multiple databases which are structured the same but contain only data relevant to a given manageable time-window (the most recent few days of data versus say monthly or yearly archival databases). Similar 'divide and conquer' approaches could be applied based on region or area to manage response similar to image tiling based solutions.

A common problem that I see to both databases is outside referential identification integrity and provenance of transient metadata. For Xenia I have begin/end dates associated with parent type record id's but what I need to do is associate metadata attributes which may change on say a monthly or yearly basis to a child lookup table(like say sensor->sensor_metadata) which is associated with a fixed parent record (for long term identification purposes) while some of the more transient attributes can change on the child table with associated begin/end dates.

----

In regards to exchange between the Xenia and ODM, the path I provide is ObsKML which is the default XML import/export format for Xenia.